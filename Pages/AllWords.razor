@page "/allwords"

@using System.IO
@using Microsoft.Extensions.Logging
@using Microsoft.Maui.Storage
@using System.Collections;
@using WordleSolver.Data.Wordle;
@using System.Diagnostics;

<h1 class="text-success">
    <strong>All the words we have avaiable:</strong>
</h1>

@if (brokenData)
{
    <h1 class="text-primary">Sadly our data is <em>broken</em> right now...</h1>
}
else if (groupedByLetter == null)
{
    <p>Loading your data hold tight...</p>
}
else
{
    <label for="check">Collapse lists</label>
    <input type="checkbox" name="check" id="check" checked="checked" @onchange="SwitchVerbose" />
    <ol class="list-group list-group-numbered">
        @for (int i = 0; i < groupedByLetter.Count(); i++)
        {
            IGrouping<char, IWord> groupedWords = groupedByLetter.ElementAt(i);
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <div class="ms-2 me-auto">
                    <div class="fw-bold">Letter <strong>@groupedWords.Key</strong>:</div>
                    @if (verbose)
                    {
                        <ul class="list-group">
                            @foreach (var word in groupedWords)
                            {
                                <li class="list-group-item">
                                    @word.Value
                                </li>
                            }
                        </ul>
                    }
                    else 
                    {
                        <p>
                            This list is currenty collapsed!
                            It would contain <strong>@groupedWords.Count()</strong> elements
                        </p>
                    }
                </div>
                <span class="badge bg-primary rounded-pill">@groupedWords.Count()</span>
            </li>
        }
    </ol>
}

@code {
    private IEnumerable<IGrouping<char, IWord>> groupedByLetter;
    private List<bool> isCollapsed;
    private bool brokenData = false;
    private bool verbose = false;

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine("Trying to read the txt file");
        try
        {
            List<IWord> rawData = await ReadFileService.GetWordsListAsync("words.txt");
            groupedByLetter =
                from word in rawData
                group word by word.Value[0];

            isCollapsed = new();
            foreach (var letter in groupedByLetter)
            {
                isCollapsed.Add(false);
            }
        }
        catch (FileNotFoundException)
        {
            brokenData = true;
        }
    }

    private void SwitchVerbose()
    {
        verbose = !verbose;
    }
}
